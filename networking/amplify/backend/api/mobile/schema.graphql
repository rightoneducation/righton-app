type Mutation {
  createGameSessionFromTemplate(input: CreateGameSessionFromTemplateInput!): String 
  @function(name: "createGame-${env}") 
  @auth(
    rules: [
      { allow: public, provider: iam  },
      { allow: private, provider: userPools }
    ]
  )
}

input CreateGameSessionFromTemplateInput {
  gameTemplateId: ID!
}

# define a GameTemplate in amplify and graphql to list all gametemplates sorted by updatedAt
type GameTemplate @model
@auth(
  rules: [
    { allow: public, operations: [read], provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  title: String!
  owner: String! @index(
      name: "gameTemplatesByOwner"
      queryField: "gameTemplatesByOwner"
      sortKeyFields: ["createdAt"]
    )
  version: Int!
  description: String!
  domain: String
  cluster: String
  grade: String
  standard: String
  phaseOneTime: Int
  phaseTwoTime: Int
  imageUrl: String
  isPublic: Boolean
  questionTemplates: [QuestionTemplate] @manyToMany(relationName: "GameQuestions")
  questionTemplatesCount: Int! @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  type: String @default(value: "GameTemplate") @index(name: "gameTemplatesByDate", queryField: "gameTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "gameTemplatesByGrade", queryField: "gameTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "gameTemplatesByQuestionTemplatesCount", queryField: "gameTemplatesByQuestionTemplatesCount", sortKeyFields: ["questionTemplatesCount"])
}

input GameTemplateInput {
  title: String
  owner: String
  version: Int
  description: String
}

type QuestionTemplate @model 
@auth(
  rules: [
    { allow: public, operations: [read], provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools  }
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  title: String!
  owner: String!
  version: Int!
  choices: AWSJSON
  instructions: AWSJSON
  answerSettings: AWSJSON
  domain: String
  cluster: String
  grade: String
  standard: String
  imageUrl: String
  gameTemplates: [GameTemplate] @manyToMany(relationName: "GameQuestions")
  gameTemplatesCount: Int! @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
   type: String @default(value: "QuestionTemplate") @index(name: "questionTemplatesByDate", queryField: "questionTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "questionTemplatesByGrade", queryField: "questionTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "questionTemplatesByGameTemplatesCount", queryField: "questionTemplatesByGameTemplatesCount", sortKeyFields: ["gameTemplatesCount"])
}

input QuestionTemplateInput {
  title: String
  owner: String
  version: Int
}

type GameSession @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  gameId: ID!
  startTime: AWSDateTime
  phaseOneTime: Int!
  phaseTwoTime: Int!
  teams: [Team] @hasMany
  currentQuestionIndex: Int
  currentState: GameSessionState!
    @index(name: "byState", queryField: "gameSessionByState")
  gameCode: Int! @index(name: "byCode", queryField: "gameSessionByCode")
  isAdvancedMode: Boolean!
  imageUrl: String
  description: String
  title: String
  currentTimer: Int
  questions: [Question] @hasMany(indexName: "byGameSession", fields: ["id"])
}

enum GameSessionState {
  NOT_STARTED
  TEAMS_JOINING
  CHOOSE_CORRECT_ANSWER
  PHASE_1_DISCUSS
  PHASE_1_RESULTS
  PHASE_2_START
  CHOOSE_TRICKIEST_ANSWER
  PHASE_2_DISCUSS
  PHASE_2_RESULTS
  FINAL_RESULTS
  FINISHED
}

type Question @model(subscriptions: null, timestamps: null)
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID! @primaryKey(sortKeyFields: ["order", "gameSessionId"])
  text: String!
  choices: AWSJSON
  answerSettings: AWSJSON
  responses: AWSJSON
  hints: AWSJSON
  imageUrl: String
  instructions: AWSJSON
  standard: String
  cluster: String
  domain: String
  grade: String
  order: Int!
  isConfidenceEnabled: Boolean! @default(value: "false")
  isShortAnswerEnabled: Boolean! @default(value: "false")
  isHintEnabled: Boolean! @default(value: "true")
  gameSessionId: ID! @index(name: "byGameSession", sortKeyFields: ["id"])
}

type Team @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  name: String!
  question: Question @hasOne
  teamMembers: [TeamMember] @hasMany
  score: Int! @default(value: "0")
  selectedAvatarIndex: Int! @default(value: "0")
}

type TeamMember @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  isFacilitator: Boolean
  answers: [TeamAnswer] @hasMany
  deviceId: ID!
}

enum ConfidenceLevel {
  NOT_RATED 
  NOT_AT_ALL
  KINDA
  QUITE
  VERY
  TOTALLY
}

type TeamAnswer @model 
@auth(
  rules: [
    { allow: public, provider: iam },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  isSubmitted: Boolean! @default(value: "false")
  isShortAnswerEnabled: Boolean! @default(value: "false")
  currentState: GameSessionState!
  currentQuestionIndex: Int!
  questionId: ID!
  teamMemberAnswersId: ID!
  text: String!
  answer: AWSJSON!
  confidenceLevel: ConfidenceLevel
  hint: AWSJSON
}

type Subscription {
  onGameSessionUpdatedById(id: ID!): GameSession
    @aws_subscribe(mutations: ["updateGameSession"])
    @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamMemberUpdateByTeamId(teamTeamMembersId: ID!): TeamMember
    @aws_subscribe(mutations: ["updateTeamMember"])
    @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamCreateByGameSessionId(gameSessionTeamsId: ID!): Team
    @aws_subscribe(mutations: ["createTeam"])
    @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamDeleteByGameSessionId(gameSessionTeamsId: ID!): Team
    @aws_subscribe(mutations: ["deleteTeam"]) 
    @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
}