type Mutation {
  createGameSessionFromTemplate(input: CreateGameSessionFromTemplateInput!): String 
  @function(name: "createGameTest-${env}") 
  @auth(
    rules: [
      { allow: public, provider: iam  },
      { allow: private, provider: userPools }
    ]
  )
  uploadExternalImageToS3(input: UploadExternalImageToS3Input): String
  @function(name: "uploadExternalImageToS3-${env}")
    @auth(
    rules: [
      { allow: public, provider: iam  },
      { allow: private, provider: userPools }
    ]
  )

  waegen(input: WaeGenInput): String
  @function(name: "waegen-${env}")
    @auth(
    rules: [
      { allow: public, provider: iam  },
      { allow: private, provider: userPools }
    ]
  )

  waeregen(input: WaeRegenInput): String
  @function(name: "waeregen-${env}")
    @auth(
    rules: [
      { allow: public, provider: iam  },
      { allow: private, provider: userPools }
    ]
  )
}

input UploadExternalImageToS3Input {
  imageUrl: String!
}

input WaeGenInput {
  question: String!
  correctAnswer: String!
  wrongAnswer: String!
  discardedExplanations: AWSJSON!
}

input WaeRegenInput {
  question: String!
  correctAnswer: String!
  wrongAnswer: String!
  currentExplanation: String!
  currentPrompt: String
  incorrectMath: Boolean
  toneClarity: Boolean
  other: Boolean
  discardedExplanations: AWSJSON
}

type PublicGameTemplate @model
@auth(
  rules: [
    { allow: public, operations: [read], provider: iam  },
    { allow: owner, provider: userPools },
    { allow: private, operations: [read], provider: userPools },  
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  title: String!
  lowerCaseTitle: String!
  owner: String! @index(
      name: "publicGameTemplatesByOwner"
      queryField: "publicGameTemplatesByOwner"
      sortKeyFields: ["createdAt"]
    )
  version: Int!
  description: String!
  lowerCaseDescription: String!
  ccss: String
  domain: String
  cluster: String
  grade: String
  gradeFilter: String
  standard: String
  phaseOneTime: Int
  phaseTwoTime: Int
  imageUrl: String
  questionTemplates: [PublicQuestionTemplate] @manyToMany(relationName: "PublicGameQuestions") 
  questionTemplatesCount: Int! @default(value: "0")
  questionTemplatesOrder: AWSJSON
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  type: String @default(value: "PublicGameTemplate") @index(name: "publicGameTemplatesByDate", queryField: "publicGameTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "publicGameTemplatesByGrade", queryField: "publicGameTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "publicGameTemplatesByPublicQuestionTemplatesCount", queryField: "publicGameTemplatesByPublicQuestionTemplatesCount", sortKeyFields: ["questionTemplatesCount"])
}

input PublicGameTemplateInput {
  title: String
  owner: String
  version: Int
  description: String
}

type PrivateGameTemplate @model
@auth(
  rules: [
    { allow: owner, provider: userPools }
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  owner: String! @index(
    name: "privatecGameTemplatesByOwner"
    queryField: "privateGameTemplatesByOwner"
    sortKeyFields: ["createdAt"]
  )
  title: String!
  lowerCaseTitle: String!
  version: Int!
  description: String!
  lowerCaseDescription: String!
  ccss: String
  domain: String
  cluster: String
  grade: String
  gradeFilter: String
  standard: String
  phaseOneTime: Int
  phaseTwoTime: Int
  imageUrl: String
  questionTemplates: [PrivateQuestionTemplate] @manyToMany(relationName: "PrivateGameQuestions")
  questionTemplatesCount: Int! @default(value: "0")
  questionTemplatesOrder: AWSJSON
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  type: String @default(value: "PrivateGameTemplate") @index(name: "privateGameTemplatesByDate", queryField: "privateGameTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "privateGameTemplatesByGrade", queryField: "privateGameTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "privateGameTemplatesByPrivateQuestionTemplatesCount", queryField: "privateGameTemplatesByPrivateQuestionTemplatesCount", sortKeyFields: ["questionTemplatesCount"])
}

input PrivateGameTemplateInput {
  title: String
  version: Int
  description: String
}

type PublicQuestionTemplate @model 
@auth(
  rules: [
    { allow: public, operations: [read], provider: iam  },
    { allow: owner, provider: userPools },
    { allow: private, operations: [read], provider: userPools }
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  title: String!
  lowerCaseTitle: String!
  version: Int!
  choices: AWSJSON
  instructions: AWSJSON
  answerSettings: AWSJSON
  ccss: String
  domain: String
  cluster: String
  grade: String
  gradeFilter: String
  standard: String
  imageUrl: String
  gameTemplates: [PublicGameTemplate] @manyToMany(relationName: "PublicGameQuestions")
  gameTemplatesCount: Int! @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
   type: String @default(value: "PublicQuestionTemplate") @index(name: "publicQuestionTemplatesByDate", queryField: "publicQuestionTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "publicQuestionTemplatesByGrade", queryField: "publicQuestionTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "publicQuestionTemplatesByPublicGameTemplatesCount", queryField: "publicQuestionTemplatesByPublicGameTemplatesCount", sortKeyFields: ["gameTemplatesCount"])
}

input PublicQuestionTemplateInput {
  title: String
  owner: String
  version: Int
}

type PrivateQuestionTemplate @model 
@auth(
  rules: [
    { allow: owner, provider: userPools }
  ]
)
@aws_iam
@aws_cognito_user_pools
{
  id: ID!
  owner: String!
  title: String!
  lowerCaseTitle: String!
  version: Int!
  choices: AWSJSON
  instructions: AWSJSON
  answerSettings: AWSJSON
  ccss: String
  domain: String
  cluster: String
  grade: String
  gradeFilter: String
  standard: String
  imageUrl: String
  gameTemplates: [PrivateGameTemplate] @manyToMany(relationName: "PrivateGameQuestions")
  gameTemplatesCount: Int! @default(value: "0")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
   type: String @default(value: "PrivateQuestionTemplate") @index(name: "privateQuestionTemplatesByDate", queryField: "privateQuestionTemplatesByDate", sortKeyFields: ["updatedAt"]) @index(name: "privateQuestionTemplatesByGrade", queryField: "privateQuestionTemplatesByGrade", sortKeyFields: ["grade"]) @index(name: "privateQuestionTemplatesByPrivateGameTemplatesCount", queryField: "privateQuestionTemplatesByPrivateGameTemplatesCount", sortKeyFields: ["gameTemplatesCount"])
}

input PrivateQuestionTemplateInput {
  title: String
  owner: String
  version: Int
}

input CreateGameSessionFromTemplateInput {
  gameTemplateId: ID!
  publicPrivate: String!
}

type GameSession @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  gameId: ID!
  startTime: String
  phaseOneTime: Int!
  phaseTwoTime: Int!
  teams: [Team] @hasMany
  currentQuestionIndex: Int
  currentState: GameSessionState!
    @index(name: "byState", queryField: "gameSessionByState")
  gameCode: Int! @index(name: "byCode", queryField: "gameSessionByCode")
  isAdvancedMode: Boolean!
  imageUrl: String
  description: String
  title: String
  currentTimer: Int
  sessionData: AWSJSON
  questions: [Question] @hasMany(indexName: "byGameSession", fields: ["id"])
}

enum GameSessionState {
  NOT_STARTED
  TEAMS_JOINING
  CHOOSE_CORRECT_ANSWER
  PHASE_1_DISCUSS
  PHASE_2_START
  CHOOSE_TRICKIEST_ANSWER
  PHASE_2_DISCUSS
  FINAL_RESULTS
  FINISHED
}

type Question @model(subscriptions: null, timestamps: null)
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID! @primaryKey(sortKeyFields: ["order", "gameSessionId"])
  text: String!
  choices: AWSJSON
  answerSettings: AWSJSON
  answerData: AWSJSON
  hints: AWSJSON
  imageUrl: String
  instructions: AWSJSON
  standard: String
  cluster: String
  domain: String
  grade: String
  order: Int!
  isConfidenceEnabled: Boolean! @default(value: "false")
  isShortAnswerEnabled: Boolean! @default(value: "false")
  isHintEnabled: Boolean! @default(value: "true")
  gameSessionId: ID! @index(name: "byGameSession", sortKeyFields: ["order"])
}

type Team @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  name: String!
  question: Question @hasOne
  teamMembers: [TeamMember] @hasMany
  score: Int! @default(value: "0")
  selectedAvatarIndex: Int! @default(value: "0")
}

type TeamMember @model 
@auth(
  rules: [
    { allow: public, provider: iam  },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  isFacilitator: Boolean
  answers: [TeamAnswer] @hasMany
  deviceId: ID!
}

enum ConfidenceLevel {
  NOT_RATED 
  NOT_AT_ALL
  KINDA
  QUITE
  VERY
  TOTALLY
}

type TeamAnswer @model 
@auth(
  rules: [
    { allow: public, provider: iam },
    { allow: private, operations: [read, create, update, delete], provider: userPools }
  ]
)
{
  id: ID!
  isCorrect: Boolean
  isSubmitted: Boolean! @default(value: "false")
  isShortAnswerEnabled: Boolean! @default(value: "false")
  currentState: GameSessionState!
  currentQuestionIndex: Int!
  questionId: ID!
  teamMemberAnswersId: ID!
  teamAnswersId: ID
  teamName: String
  text: String!
  answer: AWSJSON!
  confidenceLevel: ConfidenceLevel
  hint: AWSJSON
}

type Subscription {
  onGameSessionUpdatedById(id: ID!): GameSession
    @aws_subscribe(mutations: ["updateGameSession"])
        @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamMemberUpdateByTeamId(teamTeamMembersId: ID!): TeamMember
    @aws_subscribe(mutations: ["updateTeamMember"])
        @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamCreateByGameSessionId(gameSessionTeamsId: ID!): Team
    @aws_subscribe(mutations: ["createTeam"])
        @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamDeleteByGameSessionId(gameSessionTeamsId: ID!): Team
    @aws_subscribe(mutations: ["deleteTeam"])
        @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
  onTeamUpdateByGameSessionId(gameSessionTeamsId: ID!): Team
    @aws_subscribe(mutations: ["updateTeam"])
        @auth(
      rules: [
        { allow: public, provider: iam  },
        { allow: private, provider: userPools }
      ]
    )
}

