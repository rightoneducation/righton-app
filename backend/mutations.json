{
    "resolvers": [
        {
            "typeName": "Mutation",
            "fieldName": "createGame",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGame",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n## Game\n#set( $cols = [] )\n#set( $vals = [] )\n\n## Question\n#set( $questionsCols = [] )\n#set( $questionsVals = [] )\n#set( $questionCurIdx = 0 )\n#set ( $questionsValStr = \"\" )\n#set ( $nowVarName = \":NOW\")\n\n## Game\n#foreach( $entry in $ctx.args.game.keySet() )\n\t#if ($ctx.args.game[$entry])\n    \t#if( $entry == 'imageUrl' )\n        \t#set( $discard = $cols.add(\"image_url\") )\n        #elseif( $entry == 'phaseOneTime' )\n        \t#set( $discard = $cols.add(\"phase_one_time\") )\n        #elseif( $entry == 'phaseTwoTime' )\n        \t#set( $discard = $cols.add(\"phase_two_time\") )\n        #else\n        \t#set( $discard = $cols.add($entry) )\n        #end\n        #set( $discard = $vals.add(\"'$ctx.args.game[$entry]'\") )\n    #end\n#end\n#set( $discard = $cols.add(\"updated_at\") )\n#set( $discard = $vals.add($nowVarName) )\n#set( $discard = $cols.add(\"created_at\") )\n#set( $discard = $vals.add($nowVarName) )\n#set( $valStr = $vals.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n#set( $colStr = $cols.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n$util.qr($ctx.stash.put(\"valStr\", $valStr))\n$util.qr($ctx.stash.put(\"colStr\", $colStr))\n$util.qr($ctx.stash.put(\"now\", $util.toJson($util.time.nowISO8601())))\n{} ## Intentional",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "lbqdn54dpzemlllexxj27zc2u4",
                    "kjv3c3lzfnejbiepnfhsnuhjvq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "createGameQuestion",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGameQuestion",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n$util.qr($ctx.stash.put(\"gameId\", $ctx.args.gameQuestion[\"gameId\"]))\n$util.qr($ctx.stash.put(\"id\", $ctx.args.gameQuestion[\"questionId\"]))\n#set( $gameQuestionVal = [$ctx.stash.gameId, $ctx.stash.id] )\n#set( $gameQuestionValStr = $gameQuestionVal.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n$util.qr($ctx.stash.put(\"now\", $util.toJson($util.time.nowISO8601())))\n$util.qr($ctx.stash.put(\"gameQuestionValStr\", $gameQuestionValStr))\n{}",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "qap33ng4m5cmrcfptcd6fz72ti",
                    "kjv3c3lzfnejbiepnfhsnuhjvq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "createGameStatus",
            "dataSourceName": "game_statuses",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGameStatus",
            "requestMappingTemplate": "## Below example shows how to create an object from all provided GraphQL arguments\n## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility\n## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or\n##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like\n##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\": {\n      \"gameID\": $util.dynamodb.toDynamoDBJson($ctx.args.gameID)\n    },\n    \"attributeValues\": $util.dynamodb.toMapValuesJson({\n      \"title\": \"Join the game!\",\n      \"text\": \"Open RightOn and enter the code below to join the game.\",\n      \"screenID\": \"JoinScreen\"\n    })\n}",
            "responseMappingTemplate": "$util.qr($ctx.result.put(\"__typename\", $ctx.result.screenID))\n\n$util.toJson($ctx.result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "createQuestion",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createQuestion",
            "requestMappingTemplate": "#set( $cols = [\"updated_at\", \"created_at\"] )\n#set( $vals = [\":NOW\", \":NOW\"] )\n#foreach( $entry in $ctx.args.question.keySet() )\n  #if ( $entry == 'gameId' )\n  \t$util.qr($ctx.stash.put(\"gameId\", $ctx.args.question[$entry]))\n  #elseif ( $entry == 'imageUrl' )\n  \t#set( $discard = $cols.add(\"image_url\") )\n    #set( $discard = $vals.add(\"'$ctx.args.question[$entry]'\") )\n  #elseif ( $entry == 'wrongAnswers' )\n  \t#set( $discard = $cols.add(\"wrong_answers\") )\n    #set( $discard = $vals.add(\"'$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))'\") )\n  #elseif( $entry == \"instructions\" )\n  \t#set( $discard = $cols.add(\"instructions\") )\n    #set( $discard = $vals.add(\"'$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))'\") )\n  #elseif( $ctx.args.question[$entry] )\n  \t#set( $discard = $cols.add($entry) )\n  \t#set( $discard = $vals.add(\"'$ctx.args.question[$entry]'\") )\n  #end\n#end\n#set( $valStr = $vals.toString() )\n#set( $valsLength = $valStr.length() - 1 )\n#set( $valSubStr = $valStr.substring(1, $valsLength) )\n#set( $valStr = \"(\" + $valSubStr + \")\" )\n#set( $colStr = $cols.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n\n$util.qr($ctx.stash.put(\"colStr\", $colStr))\n$util.qr($ctx.stash.put(\"valStr\", $valStr))\n\n{} ## Intentional",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "h524rlkjyjgbfjtql2ysqlxcoq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "deleteGame",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/deleteGame",
            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\"SELECT id, title, grade, domain, cluster, description, standard, image_url, phase_one_time, phase_two_time, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM games WHERE id = :ID\", \"DELETE FROM games WHERE id = :ID\"],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.id)\n  }\n}",
            "responseMappingTemplate": "#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.isEmpty() )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[0] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set ( $game = $output[0] )\n#set ( $result = {\n\t\"id\": $game[\"id\"],\n\t\"title\": $game[\"title\"],\n    \"grade\": $game[\"grade\"],\n    \"domain\": $game[\"domain\"],\n    \"cluster\": $game[\"cluster\"],\n    \"description\": $game[\"description\"],\n    \"standard\": $game[\"standard\"],\n    \"phaseOneTime\": $game[\"phase_one_time\"],\n    \"phaseTwoTime\": $game[\"phase_two_time\"],\n    \"imageUrl\": $game[\"image_url\"],\n    \"updatedAt\": $game[\"updated_date_time\"],\n    \"createdAt\": $game[\"created_date_time\"],\n    \"questions\": []\n})\n$utils.toJson($result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "deleteQuestion",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/deleteQuestion",
            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\"SELECT *, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM questions WHERE id = :ID\", \"DELETE FROM questions WHERE id = :ID\"],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.id)\n  }\n}",
            "responseMappingTemplate": "#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.isEmpty() )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[0] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set( $record = $output[0] )\n#set( $question = {\n      \"id\": $record[\"id\"],\n      \"instructions\": $record[\"instructions\"],\n      \"text\": $record[\"text\"],\n      \"answer\": $record[\"answer\"],\n      \"imageUrl\": $record[\"image_url\"],\n      \"updatedAt\": $record[\"updated_date_time\"],\n      \"createdAt\": $record[\"created_date_time\"],\n      \"wrongAnswers\": $record[\"wrong_answers\"],\n      \"cluster\": $record[\"cluster\"],\n      \"domain\": $record[\"domain\"],\n      \"grade\": $record[\"grade\"],\n      \"standard\": $record[\"standard\"]\n} )\n$utils.toJson($question)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateGame",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateGame",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n$util.qr($ctx.stash.put(\"gameId\", $ctx.args.game.id))\n#set( $insertList = [] )\n#set( $questions = $ctx.args.game.questions )\n$util.qr($ctx.stash.put(\"questions\", $questions))\n#foreach( $question in $questions )\n\t#set( $discard = $insertList.add([$ctx.args.game.id, $question.id]) )\n#end\n#set( $insertListStr = $insertList.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n#set( $insertListLen = $insertListStr.length() - 1 )\n#set( $insertListSubStr = $insertListStr.substring(1, $insertListLen) )\n$util.qr($ctx.stash.put(\"gameQuestionInsertList\", $insertListSubStr))\n{}",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "cu5bzxro5vbu3prlfog2upwpmm",
                    "nuox7xgcivg5bkz6ssfodpqe6m"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateGameStatus",
            "dataSourceName": "game_statuses",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateGameStatus",
            "requestMappingTemplate": "## Below example shows how to create an object from all provided GraphQL arguments\n## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility\n## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or\n##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like\n##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"gameID\": $util.dynamodb.toDynamoDBJson($ctx.args.gameID),\n    },\n    \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.screenData)\n}",
            "responseMappingTemplate": "$util.qr($ctx.result.put(\"__typename\", $ctx.result.screenID))\n\n$util.toJson($ctx.result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateQuestion",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateQuestion",
            "requestMappingTemplate": "#set( $updateList = {} )\n#set( $instructions = \"\")\n#set( $wrongAnswers = \"\" )\n#foreach( $entry in $ctx.args.question.keySet() )\n  #if( $entry == \"instructions\" and $ctx.args.question[$entry] )\n  \t#set( $instructions = \"$entry = '$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))', \" )\n  #elseif ( $entry == \"wrongAnswers\" )\n    #set( $wrongAnswers = \"wrong_answers = '$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))', \" )\n  #elseif ( $ctx.args.question[$entry] )\n  \t#set( $discard = $updateList.put($entry, \"'$ctx.args.question[$entry]'\") )\n  #end\n#end\n#set( $update = $updateList.toString().replace(\"{\",\"\").replace(\"}\",\"\").replace(\"imageUrl\", \"image_url\") )\n#set( $query = \"UPDATE questions SET $update, $instructions $wrongAnswers updated_at = :NOW WHERE id = :ID\" )\n$util.qr($ctx.stash.put(\"query\", $query))\n{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\n  \t\"UPDATE questions SET $update, $instructions $wrongAnswers updated_at = :NOW WHERE id = :ID\", \n    \"SELECT *, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM questions WHERE id = :ID\"\n  ],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.question.id),\n    \":NOW\": $util.toJson($util.time.nowISO8601())\n  }\n}",
            "responseMappingTemplate": "#if($ctx.error)\n  $utils.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.length() < 2 )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[1] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set( $output = $output[0])\n\n#set( $result = {\n\t\"id\": $output[\"id\"],\n    \"instructions\": $output[\"instructions\"],\n    \"text\": $output[\"text\"],\n    \"answer\": $output[\"answer\"],\n    \"imageUrl\": $output[\"image_url\"],\n    \"updatedAt\": $output[\"updated_date_time\"],\n    \"createdAt\": $output[\"created_date_time\"],\n    \"standard\": $output[\"standard\"],\n    \"grade\": $output[\"grade\"],\n    \"cluster\": $output[\"cluster\"],\n    \"wrongAnswers\": $output[\"wrong_answers\"],\n    \"domain\": $output[\"domain\"]\n})\n\n$util.toJson($result)",
            "kind": "UNIT"
        }
    ]
}
{
    "resolvers": [
        {
            "typeName": "Mutation",
            "fieldName": "createGame",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGame",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n## Game\n#set( $cols = [] )\n#set( $vals = [] )\n\n## Question\n#set( $questionsCols = [] )\n#set( $questionsVals = [] )\n#set( $questionCurIdx = 0 )\n#set ( $questionsValStr = \"\" )\n#set ( $nowVarName = \":NOW\")\n\n## Game\n#foreach( $entry in $ctx.args.game.keySet() )\n\t#if ($ctx.args.game[$entry])\n    \t#if( $entry == 'imageUrl' )\n        \t#set( $discard = $cols.add(\"image_url\") )\n        #elseif( $entry == 'phaseOneTime' )\n        \t#set( $discard = $cols.add(\"phase_one_time\") )\n        #elseif( $entry == 'phaseTwoTime' )\n        \t#set( $discard = $cols.add(\"phase_two_time\") )\n        #else\n        \t#set( $discard = $cols.add($entry) )\n        #end\n        #set( $discard = $vals.add(\"'$ctx.args.game[$entry]'\") )\n    #end\n#end\n#set( $discard = $cols.add(\"updated_at\") )\n#set( $discard = $vals.add($nowVarName) )\n#set( $discard = $cols.add(\"created_at\") )\n#set( $discard = $vals.add($nowVarName) )\n#set( $valStr = $vals.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n#set( $colStr = $cols.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n$util.qr($ctx.stash.put(\"valStr\", $valStr))\n$util.qr($ctx.stash.put(\"colStr\", $colStr))\n$util.qr($ctx.stash.put(\"now\", $util.toJson($util.time.nowISO8601())))\n{} ## Intentional",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "lbqdn54dpzemlllexxj27zc2u4",
                    "kjv3c3lzfnejbiepnfhsnuhjvq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "createGameQuestion",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGameQuestion",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n$util.qr($ctx.stash.put(\"gameId\", $ctx.args.gameQuestion[\"gameId\"]))\n$util.qr($ctx.stash.put(\"id\", $ctx.args.gameQuestion[\"questionId\"]))\n#set( $gameQuestionVal = [$ctx.stash.gameId, $ctx.stash.id] )\n#set( $gameQuestionValStr = $gameQuestionVal.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n$util.qr($ctx.stash.put(\"now\", $util.toJson($util.time.nowISO8601())))\n$util.qr($ctx.stash.put(\"gameQuestionValStr\", $gameQuestionValStr))\n{}",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "qap33ng4m5cmrcfptcd6fz72ti",
                    "kjv3c3lzfnejbiepnfhsnuhjvq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "createGameStatus",
            "dataSourceName": "game_statuses",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createGameStatus",
            "requestMappingTemplate": "## Below example shows how to create an object from all provided GraphQL arguments\n## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility\n## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or\n##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like\n##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\": {\n      \"gameID\": $util.dynamodb.toDynamoDBJson($ctx.args.gameID)\n    },\n    \"attributeValues\": $util.dynamodb.toMapValuesJson({\n      \"title\": \"Join the game!\",\n      \"text\": \"Open RightOn and enter the code below to join the game.\",\n      \"screenID\": \"JoinScreen\"\n    })\n}",
            "responseMappingTemplate": "$util.qr($ctx.result.put(\"__typename\", $ctx.result.screenID))\n\n$util.toJson($ctx.result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "createQuestion",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/createQuestion",
            "requestMappingTemplate": "#set( $cols = [\"updated_at\", \"created_at\"] )\n#set( $vals = [\":NOW\", \":NOW\"] )\n#foreach( $entry in $ctx.args.question.keySet() )\n  #if ( $entry == 'gameId' )\n  \t$util.qr($ctx.stash.put(\"gameId\", $ctx.args.question[$entry]))\n  #elseif ( $entry == 'imageUrl' )\n  \t#set( $discard = $cols.add(\"image_url\") )\n    #set( $discard = $vals.add(\"'$ctx.args.question[$entry]'\") )\n  #elseif ( $entry == 'wrongAnswers' )\n  \t#set( $discard = $cols.add(\"wrong_answers\") )\n    #set( $discard = $vals.add(\"'$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))'\") )\n  #elseif( $entry == \"instructions\" )\n  \t#set( $discard = $cols.add(\"instructions\") )\n    #set( $discard = $vals.add(\"'$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))'\") )\n  #elseif( $ctx.args.question[$entry] )\n  \t#set( $discard = $cols.add($entry) )\n  \t#set( $discard = $vals.add(\"'$ctx.args.question[$entry]'\") )\n  #end\n#end\n#set( $valStr = $vals.toString() )\n#set( $valsLength = $valStr.length() - 1 )\n#set( $valSubStr = $valStr.substring(1, $valsLength) )\n#set( $valStr = \"(\" + $valSubStr + \")\" )\n#set( $colStr = $cols.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n\n$util.qr($ctx.stash.put(\"colStr\", $colStr))\n$util.qr($ctx.stash.put(\"valStr\", $valStr))\n\n{} ## Intentional",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "h524rlkjyjgbfjtql2ysqlxcoq"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "deleteGame",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/deleteGame",
            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\"SELECT id, title, grade, domain, cluster, description, standard, image_url, phase_one_time, phase_two_time, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM games WHERE id = :ID\", \"DELETE FROM games WHERE id = :ID\"],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.id)\n  }\n}",
            "responseMappingTemplate": "#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.isEmpty() )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[0] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set ( $game = $output[0] )\n#set ( $result = {\n\t\"id\": $game[\"id\"],\n\t\"title\": $game[\"title\"],\n    \"grade\": $game[\"grade\"],\n    \"domain\": $game[\"domain\"],\n    \"cluster\": $game[\"cluster\"],\n    \"description\": $game[\"description\"],\n    \"standard\": $game[\"standard\"],\n    \"phaseOneTime\": $game[\"phase_one_time\"],\n    \"phaseTwoTime\": $game[\"phase_two_time\"],\n    \"imageUrl\": $game[\"image_url\"],\n    \"updatedAt\": $game[\"updated_date_time\"],\n    \"createdAt\": $game[\"created_date_time\"],\n    \"questions\": []\n})\n$utils.toJson($result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "deleteQuestion",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/deleteQuestion",
            "requestMappingTemplate": "{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\"SELECT *, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM questions WHERE id = :ID\", \"DELETE FROM questions WHERE id = :ID\"],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.id)\n  }\n}",
            "responseMappingTemplate": "#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.isEmpty() )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[0] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set( $record = $output[0] )\n#set( $question = {\n      \"id\": $record[\"id\"],\n      \"instructions\": $record[\"instructions\"],\n      \"text\": $record[\"text\"],\n      \"choices\": $record[\"choices\"],\n      \"imageUrl\": $record[\"image_url\"],\n      \"updatedAt\": $record[\"updated_date_time\"],\n      \"createdAt\": $record[\"created_date_time\"],\n      \"cluster\": $record[\"cluster\"],\n      \"domain\": $record[\"domain\"],\n      \"grade\": $record[\"grade\"],\n      \"standard\": $record[\"standard\"]\n} )\n$utils.toJson($question)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateGame",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateGame",
            "requestMappingTemplate": "## By default in a before template, all you need is a valid JSON payload.\n## You can also stash data to be made available to the functions in the pipeline.\n## Examples: \n## - $ctx.stash.put(\"email\", $ctx.args.email)\n## - $ctx.stash.put(\"badgeNumber\", $ctx.args.input.badgeNumber)\n## - $ctx.stash.put(\"username\", $ctx.identity.username)\n$util.qr($ctx.stash.put(\"gameId\", $ctx.args.game.id))\n#set( $insertList = [] )\n#set( $questions = $ctx.args.game.questions )\n$util.qr($ctx.stash.put(\"questions\", $questions))\n#foreach( $question in $questions )\n\t#set( $discard = $insertList.add([$ctx.args.game.id, $question.id]) )\n#end\n#set( $insertListStr = $insertList.toString().replace(\"[\",\"(\").replace(\"]\",\")\") )\n#set( $insertListLen = $insertListStr.length() - 1 )\n#set( $insertListSubStr = $insertListStr.substring(1, $insertListLen) )\n$util.qr($ctx.stash.put(\"gameQuestionInsertList\", $insertListSubStr))\n{}",
            "responseMappingTemplate": "## The after mapping template is used to collect the final value that is returned by the resolver. \n$util.toJson($ctx.result)",
            "kind": "PIPELINE",
            "pipelineConfig": {
                "functions": [
                    "cu5bzxro5vbu3prlfog2upwpmm",
                    "nuox7xgcivg5bkz6ssfodpqe6m"
                ]
            }
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateGameStatus",
            "dataSourceName": "game_statuses",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateGameStatus",
            "requestMappingTemplate": "## Below example shows how to create an object from all provided GraphQL arguments\n## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility\n## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or\n##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like\n##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        \"gameID\": $util.dynamodb.toDynamoDBJson($ctx.args.gameID),\n    },\n    \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.screenData)\n}",
            "responseMappingTemplate": "$util.qr($ctx.result.put(\"__typename\", $ctx.result.screenID))\n\n$util.toJson($ctx.result)",
            "kind": "UNIT"
        },
        {
            "typeName": "Mutation",
            "fieldName": "updateQuestion",
            "dataSourceName": "WebRDSDev",
            "resolverArn": "arn:aws:appsync:us-east-1:484006752749:apis/mz6btgo62nhu5dcl67k5namuwe/types/Mutation/resolvers/updateQuestion",
            "requestMappingTemplate": "#set( $updateList = {} )\n#set( $instructions = \"\")\n#set( $wrongAnswers = \"\" )\n#foreach( $entry in $ctx.args.question.keySet() )\n  #if( $entry == \"instructions\" and $ctx.args.question[$entry] )\n  \t#set( $instructions = \"$entry = '$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))', \" )\n  #elseif ( $entry == \"wrongAnswers\" )\n    #set( $wrongAnswers = \"wrong_answers = '$utils.escapeJavaScript($utils.toJson($ctx.args.question[$entry]))', \" )\n  #elseif ( $ctx.args.question[$entry] )\n  \t#set( $discard = $updateList.put($entry, \"'$ctx.args.question[$entry]'\") )\n  #end\n#end\n#set( $update = $updateList.toString().replace(\"{\",\"\").replace(\"}\",\"\").replace(\"imageUrl\", \"image_url\") )\n#set( $query = \"UPDATE questions SET $update, $instructions $wrongAnswers updated_at = :NOW WHERE id = :ID\" )\n$util.qr($ctx.stash.put(\"query\", $query))\n{\n  \"version\": \"2018-05-29\",\n  \"statements\":   [\n  \t\"UPDATE questions SET $update, $instructions $wrongAnswers updated_at = :NOW WHERE id = :ID\", \n    \"SELECT *, to_char(created_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS created_date_time, to_char(updated_at, 'YYYY-MM-DD\\\"T\\\"HH24:MI:SS\\\"Z\\\"') AS updated_date_time FROM questions WHERE id = :ID\"\n  ],\n  \"variableMap\": {\n  \t\":ID\": $util.toJson($ctx.args.question.id),\n    \":NOW\": $util.toJson($util.time.nowISO8601())\n  }\n}",
            "responseMappingTemplate": "#if($ctx.error)\n  $utils.error($ctx.error.message, $ctx.error.type)\n#end\n#set( $output = $utils.rds.toJsonObject($ctx.result) )\n#if( $output.length() < 2 )\n  $util.error(\"Invalid response from RDS DataSource. See info for the full response.\", \"InvalidResponse\", {}, $output)\n#end\n#set( $output = $output[1] )\n#if( $output.isEmpty() )\n  #return\n#end\n#set( $output = $output[0])\n\n#set( $result = {\n\t\"id\": $output[\"id\"],\n    \"instructions\": $output[\"instructions\"],\n    \"text\": $output[\"text\"],\n    \"answer\": $output[\"answer\"],\n    \"imageUrl\": $output[\"image_url\"],\n    \"updatedAt\": $output[\"updated_date_time\"],\n    \"createdAt\": $output[\"created_date_time\"],\n    \"standard\": $output[\"standard\"],\n    \"grade\": $output[\"grade\"],\n    \"cluster\": $output[\"cluster\"],\n    \"wrongAnswers\": $output[\"wrong_answers\"],\n    \"domain\": $output[\"domain\"]\n})\n\n$util.toJson($result)",
            "kind": "UNIT"
        }
    ]
}
